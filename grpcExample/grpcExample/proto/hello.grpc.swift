//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: hello.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// The greeting service definition.
///
/// Usage: instantiate `Greeter_GreeterClient`, then call methods of this protocol to make API calls.
internal protocol Greeter_GreeterClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Greeter_GreeterClientInterceptorFactoryProtocol? { get }

  func sayHello(
    _ request: Greeter_HelloRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Greeter_HelloRequest, Greeter_HelloResponse>

  func lotsOfReplies(
    _ request: Greeter_HelloRequest,
    callOptions: CallOptions?,
    handler: @escaping (Greeter_HelloResponse) -> Void
  ) -> ServerStreamingCall<Greeter_HelloRequest, Greeter_HelloResponse>

  func lotsOfRequests(
    callOptions: CallOptions?
  ) -> ClientStreamingCall<Greeter_HelloRequest, Greeter_HelloResponse>

  func bidirectionalHello(
    callOptions: CallOptions?,
    handler: @escaping (Greeter_HelloResponse) -> Void
  ) -> BidirectionalStreamingCall<Greeter_HelloRequest, Greeter_HelloResponse>
}

extension Greeter_GreeterClientProtocol {
  internal var serviceName: String {
    return "greeter.Greeter"
  }

  ///unary call
  ///
  /// - Parameters:
  ///   - request: Request to send to SayHello.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func sayHello(
    _ request: Greeter_HelloRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Greeter_HelloRequest, Greeter_HelloResponse> {
    return self.makeUnaryCall(
      path: Greeter_GreeterClientMetadata.Methods.sayHello.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSayHelloInterceptors() ?? []
    )
  }

  ///server_streaming
  ///
  /// - Parameters:
  ///   - request: Request to send to LotsOfReplies.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func lotsOfReplies(
    _ request: Greeter_HelloRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Greeter_HelloResponse) -> Void
  ) -> ServerStreamingCall<Greeter_HelloRequest, Greeter_HelloResponse> {
    return self.makeServerStreamingCall(
      path: Greeter_GreeterClientMetadata.Methods.lotsOfReplies.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLotsOfRepliesInterceptors() ?? [],
      handler: handler
    )
  }

  ///client_streaming
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata, status and response.
  internal func lotsOfRequests(
    callOptions: CallOptions? = nil
  ) -> ClientStreamingCall<Greeter_HelloRequest, Greeter_HelloResponse> {
    return self.makeClientStreamingCall(
      path: Greeter_GreeterClientMetadata.Methods.lotsOfRequests.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLotsOfRequestsInterceptors() ?? []
    )
  }

  ///bi-directional_streaming
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  internal func bidirectionalHello(
    callOptions: CallOptions? = nil,
    handler: @escaping (Greeter_HelloResponse) -> Void
  ) -> BidirectionalStreamingCall<Greeter_HelloRequest, Greeter_HelloResponse> {
    return self.makeBidirectionalStreamingCall(
      path: Greeter_GreeterClientMetadata.Methods.bidirectionalHello.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBidirectionalHelloInterceptors() ?? [],
      handler: handler
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension Greeter_GreeterClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "Greeter_GreeterNIOClient")
internal final class Greeter_GreeterClient: Greeter_GreeterClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Greeter_GreeterClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Greeter_GreeterClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the greeter.Greeter service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Greeter_GreeterClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Greeter_GreeterNIOClient: Greeter_GreeterClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Greeter_GreeterClientInterceptorFactoryProtocol?

  /// Creates a client for the greeter.Greeter service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Greeter_GreeterClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
/// The greeting service definition.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Greeter_GreeterAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Greeter_GreeterClientInterceptorFactoryProtocol? { get }

  func makeSayHelloCall(
    _ request: Greeter_HelloRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Greeter_HelloRequest, Greeter_HelloResponse>

  func makeLotsOfRepliesCall(
    _ request: Greeter_HelloRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Greeter_HelloRequest, Greeter_HelloResponse>

  func makeLotsOfRequestsCall(
    callOptions: CallOptions?
  ) -> GRPCAsyncClientStreamingCall<Greeter_HelloRequest, Greeter_HelloResponse>

  func makeBidirectionalHelloCall(
    callOptions: CallOptions?
  ) -> GRPCAsyncBidirectionalStreamingCall<Greeter_HelloRequest, Greeter_HelloResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Greeter_GreeterAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Greeter_GreeterClientMetadata.serviceDescriptor
  }

  internal var interceptors: Greeter_GreeterClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeSayHelloCall(
    _ request: Greeter_HelloRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Greeter_HelloRequest, Greeter_HelloResponse> {
    return self.makeAsyncUnaryCall(
      path: Greeter_GreeterClientMetadata.Methods.sayHello.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSayHelloInterceptors() ?? []
    )
  }

  internal func makeLotsOfRepliesCall(
    _ request: Greeter_HelloRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Greeter_HelloRequest, Greeter_HelloResponse> {
    return self.makeAsyncServerStreamingCall(
      path: Greeter_GreeterClientMetadata.Methods.lotsOfReplies.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLotsOfRepliesInterceptors() ?? []
    )
  }

  internal func makeLotsOfRequestsCall(
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncClientStreamingCall<Greeter_HelloRequest, Greeter_HelloResponse> {
    return self.makeAsyncClientStreamingCall(
      path: Greeter_GreeterClientMetadata.Methods.lotsOfRequests.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLotsOfRequestsInterceptors() ?? []
    )
  }

  internal func makeBidirectionalHelloCall(
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncBidirectionalStreamingCall<Greeter_HelloRequest, Greeter_HelloResponse> {
    return self.makeAsyncBidirectionalStreamingCall(
      path: Greeter_GreeterClientMetadata.Methods.bidirectionalHello.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBidirectionalHelloInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Greeter_GreeterAsyncClientProtocol {
  internal func sayHello(
    _ request: Greeter_HelloRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Greeter_HelloResponse {
    return try await self.performAsyncUnaryCall(
      path: Greeter_GreeterClientMetadata.Methods.sayHello.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSayHelloInterceptors() ?? []
    )
  }

  internal func lotsOfReplies(
    _ request: Greeter_HelloRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Greeter_HelloResponse> {
    return self.performAsyncServerStreamingCall(
      path: Greeter_GreeterClientMetadata.Methods.lotsOfReplies.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLotsOfRepliesInterceptors() ?? []
    )
  }

  internal func lotsOfRequests<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) async throws -> Greeter_HelloResponse where RequestStream: Sequence, RequestStream.Element == Greeter_HelloRequest {
    return try await self.performAsyncClientStreamingCall(
      path: Greeter_GreeterClientMetadata.Methods.lotsOfRequests.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLotsOfRequestsInterceptors() ?? []
    )
  }

  internal func lotsOfRequests<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) async throws -> Greeter_HelloResponse where RequestStream: AsyncSequence & Sendable, RequestStream.Element == Greeter_HelloRequest {
    return try await self.performAsyncClientStreamingCall(
      path: Greeter_GreeterClientMetadata.Methods.lotsOfRequests.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLotsOfRequestsInterceptors() ?? []
    )
  }

  internal func bidirectionalHello<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Greeter_HelloResponse> where RequestStream: Sequence, RequestStream.Element == Greeter_HelloRequest {
    return self.performAsyncBidirectionalStreamingCall(
      path: Greeter_GreeterClientMetadata.Methods.bidirectionalHello.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBidirectionalHelloInterceptors() ?? []
    )
  }

  internal func bidirectionalHello<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Greeter_HelloResponse> where RequestStream: AsyncSequence & Sendable, RequestStream.Element == Greeter_HelloRequest {
    return self.performAsyncBidirectionalStreamingCall(
      path: Greeter_GreeterClientMetadata.Methods.bidirectionalHello.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBidirectionalHelloInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Greeter_GreeterAsyncClient: Greeter_GreeterAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Greeter_GreeterClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Greeter_GreeterClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

internal protocol Greeter_GreeterClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'sayHello'.
  func makeSayHelloInterceptors() -> [ClientInterceptor<Greeter_HelloRequest, Greeter_HelloResponse>]

  /// - Returns: Interceptors to use when invoking 'lotsOfReplies'.
  func makeLotsOfRepliesInterceptors() -> [ClientInterceptor<Greeter_HelloRequest, Greeter_HelloResponse>]

  /// - Returns: Interceptors to use when invoking 'lotsOfRequests'.
  func makeLotsOfRequestsInterceptors() -> [ClientInterceptor<Greeter_HelloRequest, Greeter_HelloResponse>]

  /// - Returns: Interceptors to use when invoking 'bidirectionalHello'.
  func makeBidirectionalHelloInterceptors() -> [ClientInterceptor<Greeter_HelloRequest, Greeter_HelloResponse>]
}

internal enum Greeter_GreeterClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Greeter",
    fullName: "greeter.Greeter",
    methods: [
      Greeter_GreeterClientMetadata.Methods.sayHello,
      Greeter_GreeterClientMetadata.Methods.lotsOfReplies,
      Greeter_GreeterClientMetadata.Methods.lotsOfRequests,
      Greeter_GreeterClientMetadata.Methods.bidirectionalHello,
    ]
  )

  internal enum Methods {
    internal static let sayHello = GRPCMethodDescriptor(
      name: "SayHello",
      path: "/greeter.Greeter/SayHello",
      type: GRPCCallType.unary
    )

    internal static let lotsOfReplies = GRPCMethodDescriptor(
      name: "LotsOfReplies",
      path: "/greeter.Greeter/LotsOfReplies",
      type: GRPCCallType.serverStreaming
    )

    internal static let lotsOfRequests = GRPCMethodDescriptor(
      name: "LotsOfRequests",
      path: "/greeter.Greeter/LotsOfRequests",
      type: GRPCCallType.clientStreaming
    )

    internal static let bidirectionalHello = GRPCMethodDescriptor(
      name: "BidirectionalHello",
      path: "/greeter.Greeter/BidirectionalHello",
      type: GRPCCallType.bidirectionalStreaming
    )
  }
}

/// The greeting service definition.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Greeter_GreeterProvider: CallHandlerProvider {
  var interceptors: Greeter_GreeterServerInterceptorFactoryProtocol? { get }

  ///unary call
  func sayHello(request: Greeter_HelloRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Greeter_HelloResponse>

  ///server_streaming
  func lotsOfReplies(request: Greeter_HelloRequest, context: StreamingResponseCallContext<Greeter_HelloResponse>) -> EventLoopFuture<GRPCStatus>

  ///client_streaming
  func lotsOfRequests(context: UnaryResponseCallContext<Greeter_HelloResponse>) -> EventLoopFuture<(StreamEvent<Greeter_HelloRequest>) -> Void>

  ///bi-directional_streaming
  func bidirectionalHello(context: StreamingResponseCallContext<Greeter_HelloResponse>) -> EventLoopFuture<(StreamEvent<Greeter_HelloRequest>) -> Void>
}

extension Greeter_GreeterProvider {
  internal var serviceName: Substring {
    return Greeter_GreeterServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "SayHello":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Greeter_HelloRequest>(),
        responseSerializer: ProtobufSerializer<Greeter_HelloResponse>(),
        interceptors: self.interceptors?.makeSayHelloInterceptors() ?? [],
        userFunction: self.sayHello(request:context:)
      )

    case "LotsOfReplies":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Greeter_HelloRequest>(),
        responseSerializer: ProtobufSerializer<Greeter_HelloResponse>(),
        interceptors: self.interceptors?.makeLotsOfRepliesInterceptors() ?? [],
        userFunction: self.lotsOfReplies(request:context:)
      )

    case "LotsOfRequests":
      return ClientStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Greeter_HelloRequest>(),
        responseSerializer: ProtobufSerializer<Greeter_HelloResponse>(),
        interceptors: self.interceptors?.makeLotsOfRequestsInterceptors() ?? [],
        observerFactory: self.lotsOfRequests(context:)
      )

    case "BidirectionalHello":
      return BidirectionalStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Greeter_HelloRequest>(),
        responseSerializer: ProtobufSerializer<Greeter_HelloResponse>(),
        interceptors: self.interceptors?.makeBidirectionalHelloInterceptors() ?? [],
        observerFactory: self.bidirectionalHello(context:)
      )

    default:
      return nil
    }
  }
}

#if compiler(>=5.6)

/// The greeting service definition.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Greeter_GreeterAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Greeter_GreeterServerInterceptorFactoryProtocol? { get }

  ///unary call
  @Sendable func sayHello(
    request: Greeter_HelloRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Greeter_HelloResponse

  ///server_streaming
  @Sendable func lotsOfReplies(
    request: Greeter_HelloRequest,
    responseStream: GRPCAsyncResponseStreamWriter<Greeter_HelloResponse>,
    context: GRPCAsyncServerCallContext
  ) async throws

  ///client_streaming
  @Sendable func lotsOfRequests(
    requestStream: GRPCAsyncRequestStream<Greeter_HelloRequest>,
    context: GRPCAsyncServerCallContext
  ) async throws -> Greeter_HelloResponse

  ///bi-directional_streaming
  @Sendable func bidirectionalHello(
    requestStream: GRPCAsyncRequestStream<Greeter_HelloRequest>,
    responseStream: GRPCAsyncResponseStreamWriter<Greeter_HelloResponse>,
    context: GRPCAsyncServerCallContext
  ) async throws
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Greeter_GreeterAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Greeter_GreeterServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Greeter_GreeterServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Greeter_GreeterServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "SayHello":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Greeter_HelloRequest>(),
        responseSerializer: ProtobufSerializer<Greeter_HelloResponse>(),
        interceptors: self.interceptors?.makeSayHelloInterceptors() ?? [],
        wrapping: self.sayHello(request:context:)
      )

    case "LotsOfReplies":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Greeter_HelloRequest>(),
        responseSerializer: ProtobufSerializer<Greeter_HelloResponse>(),
        interceptors: self.interceptors?.makeLotsOfRepliesInterceptors() ?? [],
        wrapping: self.lotsOfReplies(request:responseStream:context:)
      )

    case "LotsOfRequests":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Greeter_HelloRequest>(),
        responseSerializer: ProtobufSerializer<Greeter_HelloResponse>(),
        interceptors: self.interceptors?.makeLotsOfRequestsInterceptors() ?? [],
        wrapping: self.lotsOfRequests(requestStream:context:)
      )

    case "BidirectionalHello":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Greeter_HelloRequest>(),
        responseSerializer: ProtobufSerializer<Greeter_HelloResponse>(),
        interceptors: self.interceptors?.makeBidirectionalHelloInterceptors() ?? [],
        wrapping: self.bidirectionalHello(requestStream:responseStream:context:)
      )

    default:
      return nil
    }
  }
}

#endif // compiler(>=5.6)

internal protocol Greeter_GreeterServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'sayHello'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSayHelloInterceptors() -> [ServerInterceptor<Greeter_HelloRequest, Greeter_HelloResponse>]

  /// - Returns: Interceptors to use when handling 'lotsOfReplies'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLotsOfRepliesInterceptors() -> [ServerInterceptor<Greeter_HelloRequest, Greeter_HelloResponse>]

  /// - Returns: Interceptors to use when handling 'lotsOfRequests'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLotsOfRequestsInterceptors() -> [ServerInterceptor<Greeter_HelloRequest, Greeter_HelloResponse>]

  /// - Returns: Interceptors to use when handling 'bidirectionalHello'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBidirectionalHelloInterceptors() -> [ServerInterceptor<Greeter_HelloRequest, Greeter_HelloResponse>]
}

internal enum Greeter_GreeterServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Greeter",
    fullName: "greeter.Greeter",
    methods: [
      Greeter_GreeterServerMetadata.Methods.sayHello,
      Greeter_GreeterServerMetadata.Methods.lotsOfReplies,
      Greeter_GreeterServerMetadata.Methods.lotsOfRequests,
      Greeter_GreeterServerMetadata.Methods.bidirectionalHello,
    ]
  )

  internal enum Methods {
    internal static let sayHello = GRPCMethodDescriptor(
      name: "SayHello",
      path: "/greeter.Greeter/SayHello",
      type: GRPCCallType.unary
    )

    internal static let lotsOfReplies = GRPCMethodDescriptor(
      name: "LotsOfReplies",
      path: "/greeter.Greeter/LotsOfReplies",
      type: GRPCCallType.serverStreaming
    )

    internal static let lotsOfRequests = GRPCMethodDescriptor(
      name: "LotsOfRequests",
      path: "/greeter.Greeter/LotsOfRequests",
      type: GRPCCallType.clientStreaming
    )

    internal static let bidirectionalHello = GRPCMethodDescriptor(
      name: "BidirectionalHello",
      path: "/greeter.Greeter/BidirectionalHello",
      type: GRPCCallType.bidirectionalStreaming
    )
  }
}
